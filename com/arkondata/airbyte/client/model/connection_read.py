"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Change Management: * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create` * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests. * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):   * Adding fields to request or response bodies.   * Adding new HTTP endpoints. * All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from com.arkondata.airbyte.client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from com.arkondata.airbyte.client.exceptions import ApiAttributeError


def lazy_import():
    from com.arkondata.airbyte.client.model.airbyte_catalog import AirbyteCatalog
    from com.arkondata.airbyte.client.model.connection_schedule import ConnectionSchedule
    from com.arkondata.airbyte.client.model.connection_status import ConnectionStatus
    from com.arkondata.airbyte.client.model.namespace_definition_type import NamespaceDefinitionType
    from com.arkondata.airbyte.client.model.resource_requirements import ResourceRequirements
    globals()['AirbyteCatalog'] = AirbyteCatalog
    globals()['ConnectionSchedule'] = ConnectionSchedule
    globals()['ConnectionStatus'] = ConnectionStatus
    globals()['NamespaceDefinitionType'] = NamespaceDefinitionType
    globals()['ResourceRequirements'] = ResourceRequirements


class ConnectionRead(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'connection_id': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'source_id': (str,),  # noqa: E501
            'destination_id': (str,),  # noqa: E501
            'sync_catalog': (AirbyteCatalog,),  # noqa: E501
            'status': (ConnectionStatus,),  # noqa: E501
            'namespace_definition': (NamespaceDefinitionType,),  # noqa: E501
            'namespace_format': (str,),  # noqa: E501
            'prefix': (str,),  # noqa: E501
            'operation_ids': ([str],),  # noqa: E501
            'schedule': (ConnectionSchedule,),  # noqa: E501
            'resource_requirements': (ResourceRequirements,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'connection_id': 'connectionId',  # noqa: E501
        'name': 'name',  # noqa: E501
        'source_id': 'sourceId',  # noqa: E501
        'destination_id': 'destinationId',  # noqa: E501
        'sync_catalog': 'syncCatalog',  # noqa: E501
        'status': 'status',  # noqa: E501
        'namespace_definition': 'namespaceDefinition',  # noqa: E501
        'namespace_format': 'namespaceFormat',  # noqa: E501
        'prefix': 'prefix',  # noqa: E501
        'operation_ids': 'operationIds',  # noqa: E501
        'schedule': 'schedule',  # noqa: E501
        'resource_requirements': 'resourceRequirements',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, connection_id, name, source_id, destination_id, sync_catalog, status, *args, **kwargs):  # noqa: E501
        """ConnectionRead - a model defined in OpenAPI

        Args:
            connection_id (str):
            name (str):
            source_id (str):
            destination_id (str):
            sync_catalog (AirbyteCatalog):
            status (ConnectionStatus):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            namespace_definition (NamespaceDefinitionType): [optional]  # noqa: E501
            namespace_format (str): Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE_NAMESPACE}\" then behaves like namespaceDefinition = 'source'.. [optional] if omitted the server will use the default value of "null"  # noqa: E501
            prefix (str): Prefix that will be prepended to the name of each stream when it is written to the destination.. [optional]  # noqa: E501
            operation_ids ([str]): [optional]  # noqa: E501
            schedule (ConnectionSchedule): [optional]  # noqa: E501
            resource_requirements (ResourceRequirements): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.connection_id = connection_id
        self.name = name
        self.source_id = source_id
        self.destination_id = destination_id
        self.sync_catalog = sync_catalog
        self.status = status
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, connection_id, name, source_id, destination_id, sync_catalog, status, *args, **kwargs):  # noqa: E501
        """ConnectionRead - a model defined in OpenAPI

        Args:
            connection_id (str):
            name (str):
            source_id (str):
            destination_id (str):
            sync_catalog (AirbyteCatalog):
            status (ConnectionStatus):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            namespace_definition (NamespaceDefinitionType): [optional]  # noqa: E501
            namespace_format (str): Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE_NAMESPACE}\" then behaves like namespaceDefinition = 'source'.. [optional] if omitted the server will use the default value of "null"  # noqa: E501
            prefix (str): Prefix that will be prepended to the name of each stream when it is written to the destination.. [optional]  # noqa: E501
            operation_ids ([str]): [optional]  # noqa: E501
            schedule (ConnectionSchedule): [optional]  # noqa: E501
            resource_requirements (ResourceRequirements): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.connection_id = connection_id
        self.name = name
        self.source_id = source_id
        self.destination_id = destination_id
        self.sync_catalog = sync_catalog
        self.status = status
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
